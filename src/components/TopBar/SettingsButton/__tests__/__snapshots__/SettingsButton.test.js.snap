// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SettingsButton /> should work 1`] = `
<SettingsButton
  aria-haspopup="dialog"
  classes={Object {}}
  onClick={[Function]}
  settingsOpen="citySettings"
  type="citySettings"
>
  <WithStyles(ForwardRef(Button))
    aria-haspopup="dialog"
    className="
    undefined 
    
  "
    classes={
      Object {
        "label": undefined,
      }
    }
    id="SettingsButtoncitySettings"
    onClick={[Function]}
    role="button"
  >
    <ForwardRef(Button)
      aria-haspopup="dialog"
      className="
    undefined 
    
  "
      classes={
        Object {
          "colorInherit": "MuiButton-colorInherit",
          "contained": "MuiButton-contained",
          "containedPrimary": "MuiButton-containedPrimary",
          "containedSecondary": "MuiButton-containedSecondary",
          "containedSizeLarge": "MuiButton-containedSizeLarge",
          "containedSizeSmall": "MuiButton-containedSizeSmall",
          "disableElevation": "MuiButton-disableElevation",
          "disabled": "Mui-disabled",
          "endIcon": "MuiButton-endIcon",
          "focusVisible": "Mui-focusVisible",
          "fullWidth": "MuiButton-fullWidth",
          "iconSizeLarge": "MuiButton-iconSizeLarge",
          "iconSizeMedium": "MuiButton-iconSizeMedium",
          "iconSizeSmall": "MuiButton-iconSizeSmall",
          "label": "MuiButton-label",
          "outlined": "MuiButton-outlined",
          "outlinedPrimary": "MuiButton-outlinedPrimary",
          "outlinedSecondary": "MuiButton-outlinedSecondary",
          "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
          "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
          "root": "MuiButton-root",
          "sizeLarge": "MuiButton-sizeLarge",
          "sizeSmall": "MuiButton-sizeSmall",
          "startIcon": "MuiButton-startIcon",
          "text": "MuiButton-text",
          "textPrimary": "MuiButton-textPrimary",
          "textSecondary": "MuiButton-textSecondary",
          "textSizeLarge": "MuiButton-textSizeLarge",
          "textSizeSmall": "MuiButton-textSizeSmall",
        }
      }
      disableFocusRipple={true}
      disableRipple={true}
      id="SettingsButtoncitySettings"
      onClick={[Function]}
      role="button"
    >
      <WithStyles(ForwardRef(ButtonBase))
        aria-haspopup="dialog"
        className="MuiButton-root MuiButton-text 
    undefined 
    
  "
        component="button"
        disableRipple={true}
        disabled={false}
        focusRipple={false}
        focusVisibleClassName="Mui-focusVisible"
        id="SettingsButtoncitySettings"
        onClick={[Function]}
        role="button"
        type="button"
      >
        <ForwardRef(ButtonBase)
          aria-haspopup="dialog"
          className="MuiButton-root MuiButton-text 
    undefined 
    
  "
          classes={
            Object {
              "disabled": "Mui-disabled",
              "focusVisible": "Mui-focusVisible",
              "root": "MuiButtonBase-root",
            }
          }
          component="button"
          disableRipple={true}
          disabled={false}
          focusRipple={false}
          focusVisibleClassName="Mui-focusVisible"
          id="SettingsButtoncitySettings"
          onClick={[Function]}
          role="button"
          type="button"
        >
          <button
            aria-haspopup="dialog"
            className="MuiButtonBase-root MuiButton-root MuiButton-text 
    undefined 
    
  "
            disabled={false}
            id="SettingsButtoncitySettings"
            onBlur={[Function]}
            onClick={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            role="button"
            tabIndex={0}
            type="button"
          >
            <span
              className="MuiButton-label"
            >
              <WithStyles(SettingsText)
                type="citySettings"
              >
                <SettingsText
                  classes={
                    Object {
                      "smallIcon": "SettingsText-smallIcon-5",
                      "text": "SettingsText-text-3",
                      "textSmall": "SettingsText-textSmall-4",
                      "title": "SettingsText-title-1",
                      "titleSmall": "SettingsText-titleSmall-2",
                    }
                  }
                  type="citySettings"
                  variant="default"
                >
                  <NoSsr>
                    <WithStyles(ForwardRef(Typography))
                      className="SettingsText-title-1"
                      component="p"
                      variant="subtitle1"
                    >
                      <ForwardRef(Typography)
                        className="SettingsText-title-1"
                        classes={
                          Object {
                            "alignCenter": "MuiTypography-alignCenter",
                            "alignJustify": "MuiTypography-alignJustify",
                            "alignLeft": "MuiTypography-alignLeft",
                            "alignRight": "MuiTypography-alignRight",
                            "body1": "MuiTypography-body1",
                            "body2": "MuiTypography-body2",
                            "button": "MuiTypography-button",
                            "caption": "MuiTypography-caption",
                            "colorError": "MuiTypography-colorError",
                            "colorInherit": "MuiTypography-colorInherit",
                            "colorPrimary": "MuiTypography-colorPrimary",
                            "colorSecondary": "MuiTypography-colorSecondary",
                            "colorTextPrimary": "MuiTypography-colorTextPrimary",
                            "colorTextSecondary": "MuiTypography-colorTextSecondary",
                            "displayBlock": "MuiTypography-displayBlock",
                            "displayInline": "MuiTypography-displayInline",
                            "gutterBottom": "MuiTypography-gutterBottom",
                            "h1": "MuiTypography-h1",
                            "h2": "MuiTypography-h2",
                            "h3": "MuiTypography-h3",
                            "h4": "MuiTypography-h4",
                            "h5": "MuiTypography-h5",
                            "h6": "MuiTypography-h6",
                            "noWrap": "MuiTypography-noWrap",
                            "overline": "MuiTypography-overline",
                            "paragraph": "MuiTypography-paragraph",
                            "root": "MuiTypography-root",
                            "srOnly": "MuiTypography-srOnly",
                            "subtitle1": "MuiTypography-subtitle1",
                            "subtitle2": "MuiTypography-subtitle2",
                          }
                        }
                        component="p"
                        variant="subtitle1"
                      >
                        <p
                          className="MuiTypography-root SettingsText-title-1 MuiTypography-subtitle1"
                        >
                          <FormattedMessage
                            id="settings.citySettings"
                          >
                            City
                          </FormattedMessage>
                        </p>
                      </ForwardRef(Typography)>
                    </WithStyles(ForwardRef(Typography))>
                    <WithStyles(ForwardRef(Typography))
                      className="SettingsText-text-3"
                      component="p"
                    >
                      <ForwardRef(Typography)
                        className="SettingsText-text-3"
                        classes={
                          Object {
                            "alignCenter": "MuiTypography-alignCenter",
                            "alignJustify": "MuiTypography-alignJustify",
                            "alignLeft": "MuiTypography-alignLeft",
                            "alignRight": "MuiTypography-alignRight",
                            "body1": "MuiTypography-body1",
                            "body2": "MuiTypography-body2",
                            "button": "MuiTypography-button",
                            "caption": "MuiTypography-caption",
                            "colorError": "MuiTypography-colorError",
                            "colorInherit": "MuiTypography-colorInherit",
                            "colorPrimary": "MuiTypography-colorPrimary",
                            "colorSecondary": "MuiTypography-colorSecondary",
                            "colorTextPrimary": "MuiTypography-colorTextPrimary",
                            "colorTextSecondary": "MuiTypography-colorTextSecondary",
                            "displayBlock": "MuiTypography-displayBlock",
                            "displayInline": "MuiTypography-displayInline",
                            "gutterBottom": "MuiTypography-gutterBottom",
                            "h1": "MuiTypography-h1",
                            "h2": "MuiTypography-h2",
                            "h3": "MuiTypography-h3",
                            "h4": "MuiTypography-h4",
                            "h5": "MuiTypography-h5",
                            "h6": "MuiTypography-h6",
                            "noWrap": "MuiTypography-noWrap",
                            "overline": "MuiTypography-overline",
                            "paragraph": "MuiTypography-paragraph",
                            "root": "MuiTypography-root",
                            "srOnly": "MuiTypography-srOnly",
                            "subtitle1": "MuiTypography-subtitle1",
                            "subtitle2": "MuiTypography-subtitle2",
                          }
                        }
                        component="p"
                        variant="body2"
                      >
                        <p
                          className="MuiTypography-root SettingsText-text-3 MuiTypography-body2"
                        >
                          <FormattedMessage
                            id="settings.city.all"
                          >
                            Show all
                          </FormattedMessage>
                        </p>
                      </ForwardRef(Typography)>
                    </WithStyles(ForwardRef(Typography))>
                  </NoSsr>
                </SettingsText>
              </WithStyles(SettingsText)>
            </span>
          </button>
        </ForwardRef(ButtonBase)>
      </WithStyles(ForwardRef(ButtonBase))>
    </ForwardRef(Button)>
  </WithStyles(ForwardRef(Button))>
</SettingsButton>
`;
